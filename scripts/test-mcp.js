#!/usr/bin/env node

/**
 * Script para probar el servidor MCP independientemente
 * √ötil para diagnosticar problemas de conexi√≥n
 */

const { spawn } = require('child_process');
const path = require('path');

// Configuraci√≥n
const config = {
  DB_HOST: '',
  DB_PORT: '',
  DB_USER: '',
  DB_PASSWORD: '',
  DB_NAME: '',
  MCP_MODE: 'stdio'
};

console.log('üöÄ Iniciando servidor MCP de prueba...');
console.log('üìä Configuraci√≥n:', config);

// Ejecutar el servidor
const serverPath = path.join(__dirname, '..', 'dist', 'main.js');
const server = spawn('node', [serverPath], {
  env: { ...process.env, ...config },
  stdio: ['pipe', 'pipe', 'inherit']
});

// Simular una petici√≥n MCP
const mcpRequest = {
  jsonrpc: '2.0',
  id: 1,
  method: 'tools/list'
};

server.stdout.on('data', (data) => {
  console.log('üì§ Servidor dice:', data.toString());
});

server.on('error', (error) => {
  console.error('‚ùå Error del servidor:', error);
});

server.on('close', (code) => {
  console.log(`üîö Servidor termin√≥ con c√≥digo: ${code}`);
});

// Enviar petici√≥n despu√©s de un momento
setTimeout(() => {
  console.log('üì® Enviando petici√≥n MCP...');
  server.stdin.write(JSON.stringify(mcpRequest) + '\n');
}, 2000);

// Cerrar despu√©s de 10 segundos
setTimeout(() => {
  console.log('‚è∞ Cerrando servidor de prueba...');
  server.kill();
}, 10000);
